# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

MODULE = 'theora'

EXPORTS.theora += [
    'include/theora/codec.h',
    'include/theora/theora.h',
    'include/theora/theoradec.h',
    'include/theora/theoraenc.h',
]

LIBRARY_NAME = 'theora'

# The encoder is currently not included.
DEFINES['THEORA_DISABLE_ENCODE'] = True

CSRCS += [
    'lib/apiwrapper.c',
    'lib/bitpack.c',
    'lib/decapiwrapper.c',
    'lib/decinfo.c',
    'lib/decode.c',
    'lib/dequant.c',
    'lib/fragment.c',
    'lib/huffdec.c',
    'lib/idct.c',
    'lib/info.c',
    'lib/internal.c',
    'lib/quant.c',
    'lib/state.c',
]

# Enable appropriate assembly for the target platform.

if '86' in CONFIG['OS_TEST']:
  if not (CONFIG['OS_ARCH'] == 'SunOS') and \
     not (CONFIG['OS_ARCH'] == 'WINNT' and CONFIG['OS_TEST'] == 'x86_64'):
    DEFINES['OC_X86_ASM'] = True
    if '64' in CONFIG['OS_TEST']:
      DEFINES['OC_X86_64_ASM'] = True

if '86' in CONFIG['OS_TEST']:
  if CONFIG['_MSC_VER']:
    if '64' not in CONFIG['OS_TEST']:
      CSRCS += [
          'lib/x86_vc/mmxidct.c',
          'lib/x86_vc/mmxfrag.c',
          'lib/x86_vc/mmxstate.c',
          'lib/x86_vc/x86state.c',
          'lib/x86_vc/x86cpu.c',
      ]
    else:
      CSRCS += [
          'lib/x86/mmxidct.c',
          'lib/x86/mmxfrag.c',
          'lib/x86/mmxstate.c',
          'lib/x86/sse2idct.c',
          'lib/x86/x86state.c',
          'lib/x86/x86cpu.c',
      ]

if CONFIG['OS_TEST'] == 'arm' and CONFIG['GNU_AS']:
    DEFINES.update({
        'OC_ARM_ASM': True,
        'OC_ARM_ASM_EDSP': True,
        'OC_ARM_ASM_MEDIA': True,
        'OC_ARM_ASM_NEON': True,
    })
    CSRCS += [
        'lib/arm/armcpu.c',
        'lib/arm/armstat.c',
    ]
    asm_suffix = CONFIG['ASM_SUFFIX']
    ASFILES += [ '%s.%s' % (f, asm_suffix) for f in [
        'lib/arm/armbits-gnu',
        'lib/arm/armfrag-gnu',
        'lib/arm/armidct-gnu',
        'lib/arm/armloop-gnu',
    ]]

# The Android NDK doesn't define anything to indicate the OS target,
# so do it for them.
if CONFIG['OS_TARGET'] == 'Android':
  DEFINES['__linux__'] = True

MSVC_ENABLE_PGO = True
